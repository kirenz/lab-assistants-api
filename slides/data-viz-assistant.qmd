---
title: Create a Data Visualization Assistant
lang: en
subtitle: Using OpenAi's Assistant API
author: Jan Kirenz
execute:
  eval: false
  echo: true
highlight-style: github
format:
  revealjs: 
    toc: true
    toc-depth: 1
    embed-resources: false
    theme: [dark, ../custom.scss]  
    incremental: true
    transition: slide
    background-transition: fade
    transition-speed: slow
    code-copy: true
    code-line-numbers: true
    smaller: false
    scrollable: true
    slide-number: c
    preview-links: auto
    chalkboard: 
      buttons: false
   #logo: images/logo.png
    footer: Jan Kirenz
---

# Create a Data Visualization Assistant

Create an Assistant that can create data visualization based on a .csv file

# Setup

```{python}
import openai
from openai import OpenAI
import os

from dotenv import load_dotenv, find_dotenv
_ = load_dotenv(find_dotenv())

openai.api_key = os.getenv('OPENAI_API_KEY')
```


# Prepare Assistant

## Upload file

```{python}
client = OpenAI()
```

```{python}
file = client.files.create(
  file=open("survey.csv", "rb"),
  purpose='assistants'
)
```

- You can attach a maximum of 20 files per Assistant 
- They can be at most 512 MB each. 
- The size of all the files uploaded by an organization should not exceed 100GB.

## Create assistant

```{python}

assistant = client.beta.assistants.create(
    name="Math Tutor",
    instructions="You are great at creating beautiful data visualizations using the Python module Altair. You analyze data present in .csv files, understand relationships between variables, and come up with data visualizations relevant to those relationships. You use best practices of data storytelling and you also share a brief text summary of the relationships observed.",
    tools=[{"type": "code_interpreter"}],
    model="gpt-4-1106-preview",
    file_ids=[file.id]
)

```


# Managing Threads and Messages

Threads and Messages represent a conversation session between an Assistant and a user


## Create Thread

Let's create a Thread with an initial list of Messages:

```{python}
thread = client.beta.threads.create(
  messages=[
    {
      "role": "user",
      "content": "Create 3 data visualizations based on the relationships of the variables alter, fleissig und talente in this file.",
      "file_ids": [file.id]
    }
  ]
)
```


## Manage annotations

- Annotations provide information around how you should annotate the text in the Message:

  - `file_citation`: File citations are created by the retrieval tool and define references to a specific quote in a specific file that was uploaded and used by the Assistant to generate the response.

  - `file_path`: File path annotations are created by the code_interpreter tool and contain references to the files generated by the tool.


##

```{python}
# Retrieve the message object
message = client.beta.threads.messages.retrieve(
  thread_id=thread.id,
  message_id=message_id
)

# Extract the message content
message_content = message.content[0].text
annotations = message_content.annotations
citations = []

# Iterate over the annotations and add footnotes
for index, annotation in enumerate(annotations):
    # Replace the text with a footnote
    message_content.value = message_content.value.replace(annotation.text, f' [{index}]')

    # Gather citations based on annotation attributes
    if (file_citation := getattr(annotation, 'file_citation', None)):
        cited_file = client.files.retrieve(file_citation.file_id)
        citations.append(f'[{index}] {file_citation.quote} from {cited_file.filename}')
    elif (file_path := getattr(annotation, 'file_path', None)):
        cited_file = client.files.retrieve(file_path.file_id)
        citations.append(f'[{index}] Click <here> to download {cited_file.filename}')
        # Note: File download functionality not implemented above for brevity

# Add footnotes to the end of the message before displaying to user
message_content.value += '\n' + '\n'.join(citations)

```





# Run the Assistant

## Create run

```{python}
run = client.beta.threads.runs.create(
  thread_id=thread.id,
  assistant_id=assistant.id
)

```


# Step 5: Display the Assistant's Response

## Basics

- This creates a Run in a queued status. 

- You can periodically retrieve the Run to check on its status to see if it has moved to completed.


```{python}
run = client.beta.threads.runs.retrieve(
  thread_id=thread.id,
  run_id=run.id
)
```

## Retrieve

Once the Run completes, you can retrieve the Messages added by the Assistant to the Thread.

```{python}
messages = client.beta.threads.messages.list(
  thread_id=thread.id
)
```

- And finally, display them to the user! 

- During this Run, the Assistant added two new Messages to the Thread.

## Inspect messages

```{python}
messages

```


SyncCursorPage[ThreadMessage](data=[ThreadMessage(id='msg_ccJWWmVs0EhU5aDapJUdFxKo', assistant_id='asst_Y1T0nK91G0LYzfa9nn1LGpzl', content=[MessageContentText(text=Text(annotations=[], value='The solution to the equation \\( 3x + 11 = 14 \\) is \\( x = 1 \\).'), type='text')], created_at=1699389533, file_ids=[], metadata={}, object='thread.message', role='assistant', run_id='run_ClIvfO473JKnUCfxgbNiIgPg', thread_id='thread_Fs7I1lnurycQrAvsk1yXx7ZT'), ThreadMessage(id='msg_byyfrNOv1Pt6W3YCztiDER7k', assistant_id=None, content=[MessageContentText(text=Text(annotations=[], value='I need to solve the equation `3x + 11 = 14`. Can you help me?'), type='text')], created_at=1699389522, file_ids=[], metadata={}, object='thread.message', role='user', run_id=None, thread_id='thread_Fs7I1lnurycQrAvsk1yXx7ZT')], object='list', first_id='msg_ccJWWmVs0EhU5aDapJUdFxKo', last_id='msg_byyfrNOv1Pt6W3YCztiDER7k', has_more=False)






# Acknowledgments

*This tutorial is mainly based on [OpenAI's Assistant API documentation](https://platform.openai.com/docs/assistants/overview)*

# What's next? {background-image="../images/logo.png" background-opacity="0.5"}

**Congratulations! You have completed this tutorial** üëç

**Next, you may want to go back to the [lab's website](https://kirenz.github.io/assistants-api/)**