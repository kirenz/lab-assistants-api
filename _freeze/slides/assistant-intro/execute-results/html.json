{
  "hash": "a36c165f2e5509bd5c65988eb21a2a85",
  "result": {
    "markdown": "---\ntitle: Create an Assistant\nlang: en\nsubtitle: Using OpenAi's Assistants API\nauthor: Jan Kirenz\nexecute:\n  eval: false\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   #logo: images/logo.png\n    footer: Jan Kirenz\n---\n\n# Create an Assistant\n\nAssistants API makes it easier to build assistive AI apps that have goals and can call models and tools\n\n## What is an Assistant?\n\n- Can be configured to respond to users‚Äô messages using several parameters like:\n  - **Instructions**: how the Assistant and model should behave or respond\n  - **Tools**: the API supports Code Interpreter and Retrieval that are built and hosted by OpenAI.\n  - **Functions**: the API allows you to define custom function signatures\n\n\n## Objects\n\n![](/images/assistant.png)\n\n## What objects represent {.smaller}\n\n- **Thread**:\tA conversation session between an Assistant and a user. Threads store Messages.\n\n- **Message**: A message created by an Assistant or a user. Messages can include text, images, and other files. Messages stored as a list on the Thread.\n\n- **Run**:\tAn invocation of an Assistant on a Thread. The Assistant uses it‚Äôs configuration and the Thread‚Äôs Messages to perform tasks by calling models and tools. As part of a Run, the Assistant appends Messages to the Thread.\n\n- **Run Step**:\tA detailed list of steps the Assistant took as part of a Run. An Assistant can call tools or create Messages during it‚Äôs run. Examining Run Steps allows you to introspect how the Assistant is getting to it‚Äôs final results.\n\n\n## Demo\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/pq34V_V5j18?si=ZpD0oD41sWKXAjYL&amp;start=1177\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n\n# Setup\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport openai\nfrom openai import OpenAI\nimport os\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())\n\nopenai.api_key = os.getenv('OPENAI_API_KEY')\n```\n:::\n\n\n# Step 0: Start session\n\nFirst, we create a session of a client\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nclient = OpenAI()\n```\n:::\n\n\n# Step 1: Create an Assistant \n\n\n## Option 1: Use the Playground\n\n- You can use [OpenAI's playground](https://platform.openai.com/playground?mode=assistant) to create your Assistant in a user interface.\n\n- Get the ID of your Assistant (in the Playground below the name of the Assistant) \n\n. . .\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nOPENAI_ASSISTANT = 'asst_7rBZjKivhDiUouokmEkW2Lal'\n\nassistant = client.beta.assistants.retrieve(OPENAI_ASSISTANT)\n```\n:::\n\n\n## Option 2: Use the the Python API {.smaller}\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nassistant = client.beta.assistants.create(\n    name=\"Math Tutor\",\n    instructions=\"You are a personal Math tutor. Write and run code to answer math questions.\",\n    tools=[{\"type\": \"code_interpreter\"}],\n    model=\"gpt-4-1106-preview\"\n)\n```\n:::\n\n\n# Step 2: Create a Thread {.smaller}\n\n- A Thread represents a conversation. \n\n- Pass any user-specific context and files in this thread by creating Messages.\n\n. . .\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nthread = client.beta.threads.create()\n```\n:::\n\n\n# Step 3: Add a Message to a Thread\n\n## Create message\n\n- A Message contains the user's text, and optionally, any files that the user uploads (no images). \n\n. . .\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nmessage = client.beta.threads.messages.create(\n    thread_id=thread.id,\n    role=\"user\",\n    content=\"I need to solve the equation `3x + 11 = 14`. Can you help me?\"\n)\n```\n:::\n\n\n## Inspect message\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nmessage\n```\n:::\n\n\n```python\nThreadMessage(id='msg_9x1SPRtQLbWqXMVNIXkBZ0tF', assistant_id=None, content=[MessageContentText(text=Text(annotations=[], value='I need to solve the equation `3x + 11 = 14`. Can you help me?'), type='text')], created_at=1699425718, file_ids=[], metadata={}, object='thread.message', role='user', run_id=None, thread_id='thread_5uZgyTMf0t7Im9TPxvAVDmUD')\n```\n\n## Display user message\n\n- Show the content of the message\n\n. . .\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nmessage_content = message.content[0].text\nmessage_content.value\n```\n:::\n\n\n- 'I need to solve the equation `3x + 11 = 14`. Can you help me?'\n\n\n# Step 4: Run the Assistant {.smaller}\n\n- For the Assistant to respond to the user message, you need to create a Run. \n\n- This makes the Assistant read the Thread and decide whether to call tools or simply use the model to best answer the user query. \n\n- As the run progresses, the assistant appends Messages to the thread with the `role=\"assistant\"`.\n\n- You can optionally pass additional instructions to the Assistant while creating the Run\n\n## Create Run\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nrun = client.beta.threads.runs.create(\n  thread_id=thread.id,\n  assistant_id=assistant.id,\n  instructions=\"Please address the user as Jane Doe. The user has a premium account.\"\n)\n```\n:::\n\n\n# Step 5: Display the Assistant's Response\n\n- This creates a Run in a queued status. \n\n- You can periodically retrieve the Run to check on its status to see if it has moved to completed.\n\n\n## Retrieve Run {.smaller}\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nrun = client.beta.threads.runs.retrieve(\n  thread_id=thread.id,\n  run_id=run.id\n)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nprint(run)\n```\n:::\n\n\n. . .\n\n```python\nRun(id='run_EF9AwlwFnOQJ3wPRCIdNGVaS', assistant_id='asst_YhNjYRQT38e4I5N8WsZ7ihz1', cancelled_at=None, completed_at=None, created_at=1699425952, expires_at=1699426552, failed_at=None, file_ids=[], instructions='Please address the user as Jane Doe. The user has a premium account.', last_error=None, metadata={}, model='gpt-4-1106-preview', object='thread.run', required_action=None, started_at=None, status='queued', thread_id='thread_5uZgyTMf0t7Im9TPxvAVDmUD', tools=[ToolAssistantToolsCode(type='code_interpreter')])\n```\n\n## Retrieve Messages {.smaller}\n\nOnce the Run completes, you can retrieve the Messages added by the Assistant to the Thread.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nmessages_cursor = client.beta.threads.messages.list(\n  thread_id=thread.id\n)\n```\n:::\n\n\n. . .\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nmessages_cursor\n```\n:::\n\n\n. . .\n\n```python\nSyncCursorPage[ThreadMessage](data=[ThreadMessage(id='msg_aFjIRT2SoI0i3zcAVlFsx3Yn', assistant_id='asst_YhNjYRQT38e4I5N8WsZ7ihz1', content=[MessageContentText(text=Text(annotations=[], value='The solution to the equation \\\\(3x + 11 = 14\\\\) is \\\\(x = 1\\\\).'), type='text')], created_at=1699425958, file_ids=[], metadata={}, object='thread.message', role='assistant', run_id='run_EF9AwlwFnOQJ3wPRCIdNGVaS', thread_id='thread_5uZgyTMf0t7Im9TPxvAVDmUD'), ThreadMessage(id='msg_9x1SPRtQLbWqXMVNIXkBZ0tF', assistant_id=None, content=[MessageContentText(text=Text(annotations=[], value='I need to solve the equation `3x + 11 = 14`. Can you help me?'), type='text')], created_at=1699425718, file_ids=[], metadata={}, object='thread.message', role='user', run_id=None, thread_id='thread_5uZgyTMf0t7Im9TPxvAVDmUD')], object='list', first_id='msg_aFjIRT2SoI0i3zcAVlFsx3Yn', last_id='msg_9x1SPRtQLbWqXMVNIXkBZ0tF', has_more=False)\n```\n\n## Only display response of assistant {.smaller}\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# Iterate over the cursor to get all messages\nmessages = [message for message in messages_cursor]\n\n# The assistant's response should be the first message in the thread\nassistant_response = messages[0].content if messages else \"No response yet.\"\nprint(assistant_response)\n```\n:::\n\n\n. . .\n\n```python\n\n- [MessageContentText(text=Text(annotations=[], value='Certainly, Jane Doe. The solution to the equation \\\\(3x + 11 = 14\\\\) is \\\\(x = 1\\\\).'), type='text')]\n```\n\n\n## Extract only text response\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nassistant_response[0].text.value\n```\n:::\n\n\n- 'Certainly, Jane Doe. The solution to the equation \\\\(3x + 11 = 14\\\\) is \\\\(x = 1\\\\).'\n\n\n# Acknowledgments\n\n*This tutorial is based on [OpenAI's Assistant API documentation](https://platform.openai.com/docs/assistants/overview)*\n\n# What's next? {background-image=\"../images/logo.png\" background-opacity=\"0.5\"}\n\n**Congratulations! You have completed this tutorial** üëç\n\n**Next, you may want to go back to the [lab's website](https://kirenz.github.io/assistants-api/)**\n\n",
    "supporting": [
      "assistant-intro_files"
    ],
    "filters": [],
    "includes": {}
  }
}